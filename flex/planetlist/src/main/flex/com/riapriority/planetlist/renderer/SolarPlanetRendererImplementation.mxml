<?xml version="1.0" encoding="utf-8"?>
<!--
	 ////////////////////////////////////////////////////////////////////////////////
	 // Copyright (c) 2010, Konstantin Kovalev aka Constantiner (constantiner at gmail dot com)
	 // All rights reserved.
	 //
	 // Redistribution and use in source and binary forms, with or without modification, are permitted provided that
	 // the following conditions are met:
	 // * Redistributions of source code must retain the above copyright notice, this list of conditions and
	 // the following disclaimer.
	 // * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
	 // the following disclaimer in the documentation and/or other materials provided with the distribution.
	 // * Neither the name of the Konstantin Kovalev aka Constantiner nor the names of its contributors
	 // may be used to endorse or promote products derived from this software
	 // without specific prior written permission.
	 //
	 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
	 // OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
	 // AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
	 // OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
	 // OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 // LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 // WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
	 // OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 ////////////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer autoDrawBackground="false"
	currentStateChange="currentStateChangeHandler(event)"
	implements="com.riapriority.planetlist.renderer.SolarPlanetRenderer,
		spark.effects.animation.IAnimationTarget,
		com.riapriority.planetlist.renderer.PlanetsImageHolder,
		com.riapriority.planetlist.renderer.RendererWithAnimation"
	mouseEnabledWhereTransparent="false"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:planetlist="com.riapriority.planetlist.*"
	xmlns:renderer="com.riapriority.planetlist.renderer.*"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:util="com.riapriority.planetlist.util.*">
	<fx:Metadata>
		[Event(name="dimentionsChange",type="flash.events.Event")]
		[Style(name="sunImage",type="Class")]
		[Style(name="orbitColor",type="Number",format="Color")]
		[Style(name="orbitThickness",type="Number")]
		[Style(name="rotationMultiplier",type="Number")]
		[Style(name="changeCalculatorTransitionDuration", type="Number", format="Time", inherit="no")]
		[Style(name="changeCalculatorTransitionEasing", type="Class")]
	</fx:Metadata>
	<fx:Script>
<![CDATA[
	import spark.effects.easing.IEaser;
	import spark.effects.easing.Bounce;
			import spark.effects.animation.IAnimationTarget;
			import spark.effects.animation.SimpleMotionPath;
			import spark.effects.animation.MotionPath;
			import spark.effects.easing.Sine;
			import spark.effects.animation.Animation;
			import spark.components.supportClasses.AnimationTarget;
			import com.riapriority.planetlist.data.PlanetDescription;
			import com.riapriority.planetlist.util.PlanetAnimationEvent;
			import mx.events.StateChangeEvent;
			import spark.effects.animation.Animation;

			public static const DIMENTIONS_CHANGE_EVENT:String = "dimentionsChange";

			private var _dimentions:PlanetRendererDimentions

			[Bindable]
			private var backgroundColor:uint;

			[Bindable]
			private var drawBackground:Boolean;
			[Bindable]
			private var orbitColor:uint = 0x000000;
			[Bindable]
			private var orbitThickness:int = 0;

			[Bindable]
			private var rotationMultiplier:Number = 10;
			[Bindable]
			private var sunImage:Class;

			/**
			 * @inheritDoc
			 */
			public function pauseAnimation():void
			{
				planetAnimation.pauseAnimation();
			}

			/**
			 * @inheritDoc
			 */
			public function resumeAnimation():void
			{
				planetAnimation.resumeAnimation();
			}

			/**
			 * @inheritDoc
			 */
			public function getPlanetImage():BitmapImage
			{
				return planet;
			}

			/**
			 * @inheritDoc
			 */
			public function animationEnd(animation:Animation):void
			{
				stopAnimation();
				dispatchEvent(new Event(DIMENTIONS_CHANGE_EVENT));
			}

			/**
			 * @inheritDoc
			 */
			public function animationRepeat(animation:Animation):void
			{
				// Not needed to implement
			}

			/**
			 * @inheritDoc
			 */
			public function animationStart(animation:Animation):void
			{
				// Not needed to implement
			}

			/**
			 * @inheritDoc
			 */
			public function animationStop(animation:Animation):void
			{
				// Not needed to implement
			}

			/**
			 * @inheritDoc
			 */
			public function animationUpdate(animation:Animation):void
			{
				currentDimentions = new PlanetRendererDimentions();
				currentDimentions.innerRadius = animation.currentValue["innerRadius"];
				currentDimentions.orbitRadius = animation.currentValue["orbitRadius"];
				currentDimentions.outerRadius = animation.currentValue["outerRadius"];
				currentDimentions.planetSize = animation.currentValue["planetSize"];
				dispatchEvent(new Event(DIMENTIONS_CHANGE_EVENT));
			}

			[Bindable(event="dimentionsChange")]
			public function get dimentions():PlanetRendererDimentions
			{
				return currentDimentions ? currentDimentions : _dimentions;
			}

			/**
			 * @inheritDoc
			 */
			public function get planetDescription():PlanetDescription
			{
				return PlanetDescription(data);
			}

			private var animator:Animation = null;
			private var currentDimentions:PlanetRendererDimentions;
			/**
			 * @inheritDoc
			 */
			public function setDimentions(value:PlanetRendererDimentions, resizeOnly:Boolean):void
			{
				if (_dimentions != value)
				{
					var firstTime:Boolean = _dimentions == null;
					if (_dimentions && value)
					{
						if (_dimentions.equals(value))
						{
							return;
						}
					}
					if (resizeOnly || !_dimentions || !value)
					{
						stopAnimation();
						_dimentions = value;
					}
					else
					{
						currentDimentions = _dimentions;
						_dimentions = value;
						// Start transition
						if (!startAnimation())
						{
							stopAnimation();
						}
					}
					if (firstTime)
					{
						planet.width = _dimentions.planetSize;
						planet.height = _dimentions.planetSize;
						planet.x = _dimentions.totalRendererDimention / 2 + 
							_dimentions.orbitRadius - _dimentions.planetSize / 2;
						planet.y = _dimentions.totalRendererDimention / 2 - _dimentions.planetSize / 2;
					}
					dispatchEvent(new Event(DIMENTIONS_CHANGE_EVENT));
				}
			}
			
			private function startAnimation ():Boolean
			{
				var changeCalculatorTransitionDuration:Number = getStyle("changeCalculatorTransitionDuration");
				if (changeCalculatorTransitionDuration != 0)
				{
					if (!animator)
					{
						animator = new Animation();
						animator.animationTarget = this;
						var easing:Class = getStyle("changeCalculatorTransitionEasing");
						var easer:IEaser = easing ? new easing() : new Bounce();
						animator.easer = easer;
					}
					
					// Finish any current animation before we start the next one.
					if (animator.isPlaying)
					{
						animator.stop();
					}
					
					animator.duration = changeCalculatorTransitionDuration;
					animator.motionPaths = new <MotionPath>[
						new SimpleMotionPath("innerRadius", currentDimentions.innerRadius, _dimentions.innerRadius),
						new SimpleMotionPath("orbitRadius", currentDimentions.orbitRadius, _dimentions.orbitRadius), 
						new SimpleMotionPath("outerRadius", currentDimentions.outerRadius, _dimentions.outerRadius), 
						new SimpleMotionPath("planetSize", currentDimentions.planetSize, _dimentions.planetSize)];
					animator.play();
					return true;
				}
				return false;
			}

			private function stopAnimation():void
			{
				currentDimentions = null;
				if (animator)
				{
					if (animator.isPlaying)
					{
						animator.stop();
					}
					animator = null;
				}
			}
			
			/**
			 * @inheritDoc
			 */
			override public function styleChanged(styleName:String):void
			{
				super.styleChanged(styleName);

				var allStyles:Boolean = styleName == null || styleName == "styleName";

				if (allStyles || styleName == "orbitColor")
				{
					var newValue:Number = getStyle("orbitColor");
					if (!isNaN(newValue) && (newValue > 0))
					{
						orbitColor = newValue;
					}
				}

				if (allStyles || styleName == "orbitThickness")
				{
					var newThickness:int = getStyle("orbitThickness");
					if (newThickness >= 0)
					{
						orbitThickness = newThickness;
					}
				}

				if (allStyles || styleName == "rotationMultiplier")
				{
					var newRotationMultiplier:Number = getStyle("rotationMultiplier");
					if (newRotationMultiplier > 0 && newRotationMultiplier != rotationMultiplier)
					{
						rotationMultiplier = newRotationMultiplier;
					}
				}

				if (allStyles || styleName == "sunImage")
				{
					sunImage = getStyle("sunImage");
				}
			}

			private function animationUpdateHandler(event:PlanetAnimationEvent):void
			{
				planet.x = unscaledWidth / 2 + event.planetPoint.x;
				planet.y = unscaledHeight / 2 + event.planetPoint.y;
			}

			private function currentStateChangeHandler(event:StateChangeEvent):void
			{
				drawBackground = true;
				if (selected)
				{
					backgroundColor = getStyle("selectionColor");
				}
				else if (hovered)
				{
					backgroundColor = getStyle("rollOverColor");
				}
				else
				{
					var alternatingColors:Array = getStyle("alternatingItemColors");

					if (alternatingColors && alternatingColors.length > 0)
					{
						// translate these colors into uints
						styleManager.getColorNames(alternatingColors);

						backgroundColor = alternatingColors[itemIndex % alternatingColors.
							length];
					}
					else
					{
						drawBackground = false;
					}
				}
			}
		]]></fx:Script>
	<fx:Declarations>
		<util:PlanetAnimation animationUpdate="animationUpdateHandler(event)"
			data="{data}"
			dimentions="{dimentions}"
			id="planetAnimation"
			rotationMultiplier="{rotationMultiplier}"/>
	</fx:Declarations>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<s:Group mouseEnabledWhereTransparent="false"
		visible="{data &amp;&amp; dimentions}">
		<renderer:Ring height="{dimentions.outerRadius * 2}"
			innerHeight="{dimentions.innerRadius * 2}"
			innerWidth="{dimentions.innerRadius * 2}"
			innerX="{width / 2 - dimentions.innerRadius}"
			innerY="{height / 2 - dimentions.innerRadius}"
			width="{dimentions.outerRadius * 2}"
			x="{width / 2 - dimentions.outerRadius}"
			y="{height / 2 - dimentions.outerRadius}">
			<renderer:fill>
				<mx:SolidColor alpha="{drawBackground ? 1 : 0}"
					color="{backgroundColor}"/>
			</renderer:fill>
		</renderer:Ring>
		<s:Ellipse height="{dimentions.orbitRadius * 2}"
			width="{dimentions.orbitRadius * 2}"
			x="{width / 2 - dimentions.orbitRadius}"
			y="{height / 2 - dimentions.orbitRadius}">
			<s:stroke>
				<mx:SolidColorStroke color="{orbitColor}"
					weight="{orbitThickness}"/>
			</s:stroke>
		</s:Ellipse>
	</s:Group>
	<s:BitmapImage height="{dimentions.orbitRadius}"
		includeInLayout="{sunImage &amp;&amp; dimentions &amp;&amp; dimentions.innerRadius == 0}"
		smooth="true"
		source="{sunImage}"
		visible="{sunImage &amp;&amp; dimentions &amp;&amp; dimentions.innerRadius == 0}"
		width="{dimentions.orbitRadius}"
		x="{width / 2 - dimentions.orbitRadius / 2}"
		y="{height / 2 - dimentions.orbitRadius / 2}"/>
	<s:BitmapImage height="{dimentions.planetSize}"
		id="planet"
		smooth="true"
		source="{(data as PlanetDescription).image}"
		visible="{data &amp;&amp; dimentions}"
		width="{dimentions.planetSize}"/>
</s:ItemRenderer>
